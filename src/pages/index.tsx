import { GetStaticProps } from "next";
import Head from "next/head";

import { SubscribeButton } from "../components/SubscribeButton";
import { stripe } from "../services/stripe";

import styles from "./home.module.scss";

interface HomeProps {
  product: {
    priceId: string;
    amount: number;
  };
}

// Existem tr√™s formas de fazer uma chamada API utilizando next.JS
// 1. Client Side rendering - Chamadas n√£o custosas, que n√£o possuem a necessidade de serem indexissadas por motores de busca
// SER√Å REALIZADA SOMENTE AP√ìS A TELA SER CARREGADA, INFORMA√á√ïES QUE N√ÉO POSSUEM NECESSIDADE DE SEREM EXIBIDAS NO CARREGAMENTO DA TELA
//                              Ex: n√£o precisa de idexissa√ß√£o, informa√ß√£o carregada por uma a√ß√£o do usu√°rio, se√ß√£o de coment√°rios em blog...

// 2. Server side rendering - Chamadas que precisam ser Indexissadas por motores de busca e devem ser realizadas a cada acesso.
//                              Ex: Dados din√¢micos da se√ß√£o do usu√°rio, informa√ß√µes do usu√°rio que est√° acessando...
// AS CHAMADAS S√ÉO REALIZADAS ANTES, E AP√ìS COMPLETAS, A TELA √â CARREGADA. INFORMA√á√ïES QUE DEVEM SER EXIBIDAS EM TELA, LOGO NO CARREGAMENTO.

// 3. Static side generation - Chamadas indexissafas por motores de busca que seus dados a serem exibidos n√£o ir√£o se alterar de
// usuario para usu√°rio, acessando a aplica√ß√£o. 
//                              Ex: Home de blog, posts de blogs, p√°gina de um produto em ecommerce...
// AS CHAMADAS S√ÉO FEITAS DE TEMPO EM TEMPO DEFINIDO. NESSE MEIO TEMPO, A INFORMA√á√ÉO DA CHAMDA ANTERIOR √â SALVA E EXIBIDA EM TODOS OS ACESSOS NESSE PER√çODO.


export default function Home({ product }: HomeProps) {
  return (
    <>
      <Head>
        <title>Inicio | igNews</title>
      </Head>
      <main className={styles.contentContainer}>
        <section className={styles.hero}>
          <span>üëè Hey, welcome</span>
          <h1>
            News about the <span>React</span> world.
          </h1>
          <p>
            Get access to all publications <br />
            <span>for {product.amount} month</span>
          </p>
          <SubscribeButton priceId={product.priceId} />
        </section>

        <img src="/images/avatar.svg" alt="girl coding" />
      </main>
    </>
  );
}

export const getStaticProps: GetStaticProps = async () => {
  //buscar as informa√ß√µes do pre√ßo do produto. Usar a pripria biblioteca api do stripe,
  //passando o price api id, que pode ser adquirido no site da stripe, dentro do produto cadastrado.
  const price = await stripe.prices.retrieve("price_1IcEwdHpdfK0unIquLg4SwAu", {
    expand: ["product"],
  });
  //o expand product √© utilizado para buscar todas as informa√ß√µes do produto, titulo, imagem, etc, possibilitando utilizar
  //essas informa√ß√µes na aplica√ß√£o.

  const product = {
    priceId: price.id,
    amount: new Intl.NumberFormat("en-US", {
      style: "currency",
      currency: "USD",
    }).format(price.unit_amount / 100),
  };

  return {
    props: {
      product,
    },
    revalidate: 60 * 60 * 24, //24hrs
  };
};
